# RONEY

name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # secrets:
  #   GHC_TOKEN_RONEY:
  #     description: Github token to use to clone
  #     required: true
#     git_user_roney:
#       description: Github user to use to clone
#       required: false

env:
  PATH_TEST: "/tmp/test"
  GIT_USER: roneysantos

jobs:
  Using_container:
    runs-on: ubuntu-latest
    container:
      image: alpine
      env:
        USER: "root"
      volumes:
        - vol-${{ github.run_id }}-workspace:/home/hss/go
        - vol-${{ github.run_id }}-tmp:/tmp
      options: -u 0:0

    steps:
      - name: Criar arquivo teste
        run: touch test && meu_alvo=$(realpath test)

  Without_container:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Mostrar raiz
      run: pwd

    - name: Listar raiz
      run: ls -l

    - name: docker volume ls vol-${{ github.run_id }}*
  

  # Build:

    # runs-on: ubuntu-latest

    # steps:
    # - uses: actions/checkout@v3

    # - name: Tests envs
    #   run: |
    #     TAGS="devTest"
    #     repos="${PATH_TEST}/${GIT_USER}"
    #     mkdir repos
    #     echo $PATH_TEST
    #     echo $TAGS
    #     echo $repos


    # - name: Configure User git
    #   run: |
    #     git config --global user.name "Fulano de Tal"

    # - name: Download all REPOS
    #   env:
    #     TOKEN: "${{ secrets.GHC_TOKEN_RONEY }}"
    #     GHORG: "roney-labs"
    #     GIT_BASE_URL: github.com
    #   run: |
    #     mkdir $PATH_TEST && cd $PATH_TEST
    #     curl -H "Authorization: token ${TOKEN}" \
    #     -L "https://api.github.com/orgs/$GHORG/repos?per_page=1000" | grep -o "https://github.com/${GHORG}[^\"]*.git" | \
    #     sed -e 's/https:\/\//https:\/\/${GIT_USER}:${TOKEN}@/' | xargs -L1 git clone

    # - name: Show Repos
    #   run: | 
    #     pwd
    #     ls -lh $PATH_TEST/*/*

    # - name: Install dependencies
    #   run: |
    #     sudo apt-get install openssl policycoreutils libxml2 libcap-* tpm2* -y
    #     which openssl
    #     dpkg -l | grep  policycoreutils

    # - name: Build the Docker image
    #   run: docker build . --file Dockerfile --tag image-nginx:latest

    # - name: Run the Docker image
    #   run: docker run --name mynginximage -p 80:80 -d image-nginx:latest

    # - name: test url
    #   run: |
    #     curl -X GET "http://localhost"

  # Ubuntu:

  #   runs-on: ubuntu-latest
  #   needs: [ Build ]

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Show enviroment run in github action
  #     run: cat /etc/issue

    # - name: Set envs
    #   run: |
    #     export DEBIAN_FRONTEND=noninteractive
    #     export DEBCONF_NONINTERACTIVE_SEEN=true

    # - name: Save debconf
    #   run: |
    #     sudo printf 'tzdata tzdata/Areas select Etc\ntzdata tzdata/Zones/Etc select UTC\n' | debconf-set-selections